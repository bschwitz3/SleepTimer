Performing C++ SOURCE FILE Test CMAKE_HAVE_LIBC_PTHREAD succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_46292 && [1/2] Building CXX object CMakeFiles/cmTC_46292.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_46292


Source file was:
#include <pthread.h>

static void* test_func(void* data)
{
  return data;
}

int main(void)
{
  pthread_t thread;
  pthread_create(&thread, NULL, test_func, NULL);
  pthread_detach(thread);
  pthread_cancel(thread);
  pthread_join(thread, NULL);
  pthread_atfork(NULL, NULL, NULL);
  pthread_exit(NULL);

  return 0;
}

Performing C++ SOURCE FILE Test HAVE_STDATOMIC succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_4b26f && [1/2] Building CXX object CMakeFiles/cmTC_4b26f.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_4b26f


Source file was:
#include <atomic>
#include <cstdint>

int main(int, char **)
{
    volatile std::atomic<char>    size_1;
    volatile std::atomic<short>   size_2;
    volatile std::atomic<int>     size_4;
    volatile std::atomic<int64_t> size_8;

    ++size_1;
    ++size_2;
    ++size_4;
    ++size_8;

    (void)size_1.load(std::memory_order_relaxed);
    (void)size_2.load(std::memory_order_relaxed);
    (void)size_4.load(std::memory_order_relaxed);
    (void)size_8.load(std::memory_order_relaxed);

    return 0;
}
Performing C++ SOURCE FILE Test CMAKE_HAVE_LIBC_PTHREAD succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_191e4 && [1/2] Building CXX object CMakeFiles/cmTC_191e4.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_191e4


Source file was:
#include <pthread.h>

static void* test_func(void* data)
{
  return data;
}

int main(void)
{
  pthread_t thread;
  pthread_create(&thread, NULL, test_func, NULL);
  pthread_detach(thread);
  pthread_cancel(thread);
  pthread_join(thread, NULL);
  pthread_atfork(NULL, NULL, NULL);
  pthread_exit(NULL);

  return 0;
}

Performing C++ SOURCE FILE Test HAVE_STDATOMIC succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_98956 && [1/2] Building CXX object CMakeFiles/cmTC_98956.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_98956


Source file was:
#include <atomic>
#include <cstdint>

int main(int, char **)
{
    volatile std::atomic<char>    size_1;
    volatile std::atomic<short>   size_2;
    volatile std::atomic<int>     size_4;
    volatile std::atomic<int64_t> size_8;

    ++size_1;
    ++size_2;
    ++size_4;
    ++size_8;

    (void)size_1.load(std::memory_order_relaxed);
    (void)size_2.load(std::memory_order_relaxed);
    (void)size_4.load(std::memory_order_relaxed);
    (void)size_8.load(std::memory_order_relaxed);

    return 0;
}
Performing C++ SOURCE FILE Test CMAKE_HAVE_LIBC_PTHREAD succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_6641c && [1/2] Building CXX object CMakeFiles/cmTC_6641c.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_6641c


Source file was:
#include <pthread.h>

static void* test_func(void* data)
{
  return data;
}

int main(void)
{
  pthread_t thread;
  pthread_create(&thread, NULL, test_func, NULL);
  pthread_detach(thread);
  pthread_cancel(thread);
  pthread_join(thread, NULL);
  pthread_atfork(NULL, NULL, NULL);
  pthread_exit(NULL);

  return 0;
}

Performing C++ SOURCE FILE Test HAVE_STDATOMIC succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_71d6a && [1/2] Building CXX object CMakeFiles/cmTC_71d6a.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_71d6a


Source file was:
#include <atomic>
#include <cstdint>

int main(int, char **)
{
    volatile std::atomic<char>    size_1;
    volatile std::atomic<short>   size_2;
    volatile std::atomic<int>     size_4;
    volatile std::atomic<int64_t> size_8;

    ++size_1;
    ++size_2;
    ++size_4;
    ++size_8;

    (void)size_1.load(std::memory_order_relaxed);
    (void)size_2.load(std::memory_order_relaxed);
    (void)size_4.load(std::memory_order_relaxed);
    (void)size_8.load(std::memory_order_relaxed);

    return 0;
}
Performing C++ SOURCE FILE Test CMAKE_HAVE_LIBC_PTHREAD succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_451ce && [1/2] Building CXX object CMakeFiles/cmTC_451ce.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_451ce


Source file was:
#include <pthread.h>

static void* test_func(void* data)
{
  return data;
}

int main(void)
{
  pthread_t thread;
  pthread_create(&thread, NULL, test_func, NULL);
  pthread_detach(thread);
  pthread_cancel(thread);
  pthread_join(thread, NULL);
  pthread_atfork(NULL, NULL, NULL);
  pthread_exit(NULL);

  return 0;
}

Performing C++ SOURCE FILE Test HAVE_STDATOMIC succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_d23a0 && [1/2] Building CXX object CMakeFiles/cmTC_d23a0.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_d23a0


Source file was:
#include <atomic>
#include <cstdint>

int main(int, char **)
{
    volatile std::atomic<char>    size_1;
    volatile std::atomic<short>   size_2;
    volatile std::atomic<int>     size_4;
    volatile std::atomic<int64_t> size_8;

    ++size_1;
    ++size_2;
    ++size_4;
    ++size_8;

    (void)size_1.load(std::memory_order_relaxed);
    (void)size_2.load(std::memory_order_relaxed);
    (void)size_4.load(std::memory_order_relaxed);
    (void)size_8.load(std::memory_order_relaxed);

    return 0;
}
Performing C++ SOURCE FILE Test CMAKE_HAVE_LIBC_PTHREAD succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_98cc6 && [1/2] Building CXX object CMakeFiles/cmTC_98cc6.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_98cc6


Source file was:
#include <pthread.h>

static void* test_func(void* data)
{
  return data;
}

int main(void)
{
  pthread_t thread;
  pthread_create(&thread, NULL, test_func, NULL);
  pthread_detach(thread);
  pthread_cancel(thread);
  pthread_join(thread, NULL);
  pthread_atfork(NULL, NULL, NULL);
  pthread_exit(NULL);

  return 0;
}

Performing C++ SOURCE FILE Test HAVE_STDATOMIC succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_009a8 && [1/2] Building CXX object CMakeFiles/cmTC_009a8.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_009a8


Source file was:
#include <atomic>
#include <cstdint>

int main(int, char **)
{
    volatile std::atomic<char>    size_1;
    volatile std::atomic<short>   size_2;
    volatile std::atomic<int>     size_4;
    volatile std::atomic<int64_t> size_8;

    ++size_1;
    ++size_2;
    ++size_4;
    ++size_8;

    (void)size_1.load(std::memory_order_relaxed);
    (void)size_2.load(std::memory_order_relaxed);
    (void)size_4.load(std::memory_order_relaxed);
    (void)size_8.load(std::memory_order_relaxed);

    return 0;
}
Performing C++ SOURCE FILE Test CMAKE_HAVE_LIBC_PTHREAD succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_0f75f && [1/2] Building CXX object CMakeFiles/cmTC_0f75f.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_0f75f


Source file was:
#include <pthread.h>

static void* test_func(void* data)
{
  return data;
}

int main(void)
{
  pthread_t thread;
  pthread_create(&thread, NULL, test_func, NULL);
  pthread_detach(thread);
  pthread_cancel(thread);
  pthread_join(thread, NULL);
  pthread_atfork(NULL, NULL, NULL);
  pthread_exit(NULL);

  return 0;
}

Performing C++ SOURCE FILE Test HAVE_STDATOMIC succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_52ec6 && [1/2] Building CXX object CMakeFiles/cmTC_52ec6.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_52ec6


Source file was:
#include <atomic>
#include <cstdint>

int main(int, char **)
{
    volatile std::atomic<char>    size_1;
    volatile std::atomic<short>   size_2;
    volatile std::atomic<int>     size_4;
    volatile std::atomic<int64_t> size_8;

    ++size_1;
    ++size_2;
    ++size_4;
    ++size_8;

    (void)size_1.load(std::memory_order_relaxed);
    (void)size_2.load(std::memory_order_relaxed);
    (void)size_4.load(std::memory_order_relaxed);
    (void)size_8.load(std::memory_order_relaxed);

    return 0;
}
Performing C++ SOURCE FILE Test CMAKE_HAVE_LIBC_PTHREAD succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_fc0ac && [1/2] Building CXX object CMakeFiles/cmTC_fc0ac.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_fc0ac


Source file was:
#include <pthread.h>

static void* test_func(void* data)
{
  return data;
}

int main(void)
{
  pthread_t thread;
  pthread_create(&thread, NULL, test_func, NULL);
  pthread_detach(thread);
  pthread_cancel(thread);
  pthread_join(thread, NULL);
  pthread_atfork(NULL, NULL, NULL);
  pthread_exit(NULL);

  return 0;
}

Performing C++ SOURCE FILE Test HAVE_STDATOMIC succeeded with the following output:
Change Dir: /Users/bastien/Desktop/SleepTimer/CMakeFiles/CMakeTmp

Run Build Command(s):/Users/bastien/Qt/Tools/Ninja/ninja cmTC_8b538 && [1/2] Building CXX object CMakeFiles/cmTC_8b538.dir/src.cxx.o
[2/2] Linking CXX executable cmTC_8b538


Source file was:
#include <atomic>
#include <cstdint>

int main(int, char **)
{
    volatile std::atomic<char>    size_1;
    volatile std::atomic<short>   size_2;
    volatile std::atomic<int>     size_4;
    volatile std::atomic<int64_t> size_8;

    ++size_1;
    ++size_2;
    ++size_4;
    ++size_8;

    (void)size_1.load(std::memory_order_relaxed);
    (void)size_2.load(std::memory_order_relaxed);
    (void)size_4.load(std::memory_order_relaxed);
    (void)size_8.load(std::memory_order_relaxed);

    return 0;
}
